Empecemos con la creación de la base de datos "gestor_tareas_David" y la tabla:

DROP DATABASE IF EXISTS gestor_tareas_David;
CREATE DATABASE gestor_tareas_David;

USE gestor_tareas_David;

DROP TABLE IF EXISTS `tareas`;
CREATE TABLE IF NOT EXISTS `tareas` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `titulo` varchar(255) NOT NULL,
  `descripcion` text DEFAULT NULL,
  `prioridad` enum('Urgente','Alta','Media','Baja') DEFAULT 'Media',
  `estado` enum('Pendiente','Ejecución','Finalizada') DEFAULT 'Pendiente',
  `fecha_limite` date DEFAULT NULL,
  `fecha_creacion` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

Continuamos con la creación de los diferentes archivos en el frontend:
1.- Página principal "index.php": 
<?php		
			
require_once 'conexion.php';
?>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="author" content="David Gutierrez">
    <title>Gestor de Tareas</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="CSS/style.css">
</head>
<body>
    <header class="bg-primary text-white py-3">
        <h1 class="text-center">Gestor de Tareas</h1>
    </header>
    <nav class="navbar navbar-expand-lg navbar-light bg-light sticky-top" role="navigation">
        <div class="container-fluid">
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav w-100 justify-content-between">
                    <li class="nav-item flex-fill text-center">
                        <a class="nav-link active" href="#" data-tipo="Pendiente">Pendientes</a>
                    </li>
                    <li class="nav-item flex-fill text-center">
                        <a class="nav-link" href="#" data-tipo="Ejecución">En Ejecución</a>
                    </li>
                    <li class="nav-item flex-fill text-center">
                        <a class="nav-link" href="#" data-tipo="Finalizada">Finalizadas</a>
                    </li>
                    <li class="nav-item flex-fill text-center">
                        <a class="nav-link" href="#" id="nuevaTareaLink">Nueva Tarea</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <main class="container mt-4">
        <section id="tareas" class="row">
            <div id="columna-pendiente" class="col-12 mb-4 columna-tareas">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h2 class="mb-0">Tareas Pendientes</h2>
                    </div>
                    <div class="card-body tareas-container row"></div>
                </div>
            </div>
            <div id="columna-ejecución" class="col-12 mb-4 columna-tareas d-none">
                <div class="card">
                    <div class="card-header bg-warning text-dark">
                        <h2 class="mb-0">Tareas en Ejecución</h2>
                    </div>
                    <div class="card-body tareas-container row"></div>
                </div>
            </div>
            <div id="columna-finalizada" class="col-12 mb-4 columna-tareas d-none">
                <div class="card">
                    <div class="card-header bg-success text-white">
                        <h2 class="mb-0">Tareas Finalizadas</h2>
                    </div>
                    <div class="card-body tareas-container row"></div>
                </div>
            </div>
        </section>
    </main>

    <!-- Modal Nueva Tarea -->
    <div class="modal fade" id="modalNuevaTarea" tabindex="-1" aria-labelledby="modalNuevaTareaLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalNuevaTareaLabel">Nueva Tarea</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="form-nueva-tarea">
                        <div class="mb-3">
                            <label for="titulo" class="form-label">Título</label>
                            <input type="text" class="form-control" id="titulo" name="titulo" required>
                        </div>
                        <div class="mb-3">
                            <label for="descripcion" class="form-label">Descripción</label>
                            <textarea class="form-control" id="descripcion" name="descripcion"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="prioridad" class="form-label">Prioridad</label>
                            <select class="form-select" id="prioridad" name="prioridad">
                                <option value="Urgente">Urgente</option>
                                <option value="Alta">Alta</option>
                                <option value="Media" selected>Media</option>
                                <option value="Baja">Baja</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="fecha_limite" class="form-label">Fecha límite</label>
                            <input type="date" class="form-control" id="fecha_limite"   name="fecha_limite" min="<?php echo date('Y-m-d'); ?>" required>
                        </div>
                        <div class="text-center">
                            <button type="submit" class="btn btn-primary"><i class="bi bi-journal-plus"></i> Crear Tarea</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Editar Tarea -->
    <div class="modal fade" id="modal-editar" tabindex="-1" aria-labelledby="modalEditarTareaLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalEditarTareaLabel">Editar Tarea</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="form-editar-tarea">
                        <input type="hidden" id="editar-id" name="id">
                        <div class="mb-3">
                            <label for="editar-titulo" class="form-label">Título</label>
                            <input type="text" class="form-control" id="editar-titulo" name="titulo" required>
                        </div>
                        <div class="mb-3">
                            <label for="editar-descripcion" class="form-label">Descripción</label>
                            <textarea class="form-control" id="editar-descripcion" name="descripcion"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="editar-fecha_limite" class="form-label">Fecha límite</label>
                            <input type="date" class="form-control" id="editar-fecha_limite" name="fecha_limite" min="<?php echo date('Y-m-d'); ?>"required>
                        </div>
                        <div class="mb-3">
                            <label for="editar-prioridad" class="form-label">Prioridad</label>
                            <select class="form-select" id="editar-prioridad" name="prioridad">
                                <option value="Urgente">Urgente</option>
                                <option value="Alta">Alta</option>
                                <option value="Media" selected>Media</option>
                                <option value="Baja">Baja</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="editar-estado" class="form-label">Estado</label>
                            <select class="form-select" id="editar-estado" name="estado">
                                <option value="Pendiente">Pendiente</option>
                                <option value="Ejecución">En Ejecución</option>
                                <option value="Finalizada">Finalizada</option>
                            </select>
                        </div>
                        <div class="text-center">
                            <button type="submit" class="btn btn-primary me-2"><i class="bi bi-journal-check"></i> Guardar Cambios</button>
                            <button type="button" id="eliminar-tarea-modal" class="btn btn-danger"><i class="bi bi-journal-x"></i> Eliminar Tarea</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script src="JS/script.js"></script>
</body>
</html>

2.- Archivo de conexión a la base de datos "conexion.php":
<?php

$host = 'localhost';
$db   = 'gestor_tareas_David';
$user = 'root';
$pass = '';
$charset = 'utf8mb4';

$dsn = "mysql:host=$host;dbname=$db;charset=$charset";


try {
    $pdo = new PDO($dsn, $user, $pass);
} catch (\PDOException $e) {
    throw new \PDOException($e->getMessage(), (int)$e->getCode());
}

3.- Hoja de estilos CSS "style.css": 
:root {
    --color-primary: #0056b3;
    --color-secondary: #ffd700;
    --color-danger: #dc3545;
    --color-light: #f8f9fa;
    --color-dark: #343a40;
}

body {
    background-color: var(--color-light);
    color: var(--color-dark);
}

.navbar {
    background-color: var(--color-primary) !important;
    box-shadow: 0 2px 4px rgba(0,0,0,.1);
}

.navbar-light .navbar-nav .nav-link {
    color: var(--color-light) !important;
    font-weight: 500;
    transition: color 0.3s ease;
}

.navbar-light .navbar-nav .nav-link:hover,
.navbar-light .navbar-nav .nav-link.active {
    color: var(--color-secondary) !important;
}

.card {
    border: none;
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    transition: transform 0.3s ease;
}

.card:hover {
    transform: translateY(-5px);
}

.card-header {
    font-weight: bold;
    color: var(--color-light);
}

.card-header.bg-primary {
    background-color: var(--color-primary) !important;
}

.card-header.bg-warning {
    background-color: var(--color-secondary) !important;
    color: var(--color-dark) !important;
}

.card-header.bg-success {
    background-color: #28a745 !important;
}

.btn-primary {
    background-color: var(--color-primary); 
    border-color: var(--color-primary);
}

.btn-primary:hover {
    background-color: #004494;
    border-color: #004494;
}

.btn-danger {
    background-color: var(--color-danger);
    border-color: var(--color-danger);
}

.btn {
    border-radius: 20px;
    padding: 0.5rem 1.5rem;
}

.form-control, .form-select {
    border-radius: 20px;
}

.modal-content {
    border-radius: 15px;
}

.modal-header {
    border-top-left-radius: 15px;
    border-top-right-radius: 15px;
    background-color: var(--color-primary);
    color: var(--color-light);
}

@media (max-width: 768px) {
    .navbar-nav {
        flex-direction: row;
        justify-content: space-between;
    }

    .navbar-nav .nav-item {
        flex: 1;
        text-align: center;
    }
}

/* Mejoras de accesibilidad */
.btn, .form-control, .form-select {
    font-size: 1rem;
}

.card-title {
    font-size: 1.25rem;
    color: var(--color-primary);
}

.text-muted {
    color: #6c757d !important;
}

/* Enfoque visible para elementos interactivos */
.btn:focus, .form-control:focus, .form-select:focus, .nav-link:focus {
    outline: 3px solid var(--color-secondary);
    outline-offset: 2px;
}

/* Recodificación de las clases de bootstrap */
.navbar-toggler {
    background-color: var(--color-light);
    color: var(--color-secondary);
}

.card-header.bg-primary {
    background-color: rgba(var(--bs-primary-rgb),var(--bs-bg-opacity)) !important;
}

.btn-pendiente {
    background-color: var(--bs-blue);
    border-color: var(--bs-blue);
    color: var(--color-light);
}

.btn-pendiente:hover {
    background-color: #0b5dd6;
    border-color: #0b5dd6;
    color: var(--color-light);
}

.btn-finalizada {
    background-color: #28A745;
    border-color: #28A745;
    color: var(--color-light);
}

.btn-finalizada:hover {
    background-color: #229d3f;
    border-color: #229d3f;
    color: var(--color-light);
}

4.- JavaScript para la interactividad del frontend "script.js":
// script.js
document.addEventListener('DOMContentLoaded', () => {
    const modalNuevaTarea = new bootstrap.Modal(document.getElementById('modalNuevaTarea'));
    const modalEditarTarea = new bootstrap.Modal(document.getElementById('modal-editar'));

    document.getElementById('nuevaTareaLink').addEventListener('click', (event) => {
        event.preventDefault();
        modalNuevaTarea.show();
    });

    document.getElementById('form-nueva-tarea').addEventListener('submit', (event) => {
        event.preventDefault();
        crearTarea(event.target);
    });

    document.getElementById('form-editar-tarea').addEventListener('submit', (event) => {
        event.preventDefault();
        guardarEdicionTarea(event.target);
    });

    document.getElementById('eliminar-tarea-modal').addEventListener('click', eliminarTareaModal);

    // Agregar event listeners para los enlaces del navbar
    document.querySelectorAll('.nav-link').forEach(link => {
        if (link.id !== 'nuevaTareaLink') {
            link.addEventListener('click', (event) => {
                event.preventDefault();
                mostrarTareas(event.target.getAttribute('data-tipo'));
            });
        }
    });

    // Mostrar las tareas pendientes por defecto
    mostrarTareas('Pendiente');
});

function mostrarTareas(tipo) {
    const contenedores = document.querySelectorAll('.columna-tareas');
    const links = document.querySelectorAll('.nav-link');
    
    contenedores.forEach(contenedor => {
        if (contenedor.id === `columna-${tipo.toLowerCase()}`) {
            contenedor.classList.remove('d-none');
        } else {
            contenedor.classList.add('d-none');
        }
    });

    links.forEach(link => {
        if (link.getAttribute('data-tipo') === tipo) {
            link.classList.add('active');
        } else {
            link.classList.remove('active');
        }
    });

    cargarTareas(tipo);
}

function cargarTareas(tipo) {
    fetch('obtener_tareas.php')
        .then(response => response.json())
        .then(tareas => {
            const contenedor = document.querySelector(`#columna-${tipo.toLowerCase()} .tareas-container`);
            contenedor.innerHTML = '';

            const tareasFiltradasPorTipo = tareas.filter(tarea => tarea.estado === tipo);

            if (tareasFiltradasPorTipo.length === 0) {
                contenedor.innerHTML = '<p class="text-center">No hay tareas en esta categoría.</p>';
            } else {
                tareasFiltradasPorTipo.forEach(tarea => {
                    const tareaElement = crearElementoTarea(tarea);
                    contenedor.appendChild(tareaElement);
                });
            }
        })
        .catch(error => {
            console.error('Error al cargar las tareas:', error);
            alert('Error al cargar las tareas. Por favor, intente de nuevo.');
        });
}

function crearElementoTarea(tarea) {
    const tareaElement = document.createElement('div');
    tareaElement.className = 'col-12 col-md-4 mb-3';
    let badgeClass;
    switch (tarea.prioridad) {
        case 'Urgente':
            badgeClass = 'bg-danger';
            break;
        case 'Alta':
            badgeClass = 'bg-warning';
            break;
        case 'Media':
            badgeClass = 'bg-success';
            break;
        default:
            badgeClass = 'bg-secondary';
    }

    let buttonClass;
    switch (tarea.estado) {
        case 'Pendiente':
            buttonClass = 'btn-pendiente';
            break;
        case 'Ejecución':
            buttonClass = 'btn-warning';
            break;
        case 'Finalizada':
            buttonClass = 'btn-finalizada';
            break;
        default:
            buttonClass = 'btn-secondary';
    }

    tareaElement.innerHTML = `
    <div class="card">
        <div class="card-body position-relative">
            <span class="badge ${badgeClass} position-absolute top-0 end-0 m-2">${tarea.prioridad}</span>
            <h5 class="card-title">${tarea.titulo}</h5>
            <p class="card-text">${tarea.descripcion}</p>
            <p class="card-text"><small class="text-muted">Fecha límite: ${tarea.fecha_limite}</small></p>
            <select class="form-select estado-tarea mb-2" data-id="${tarea.id}">
                <option value="Pendiente" ${tarea.estado === 'Pendiente' ? 'selected' : ''}>Pendiente</option>
                <option value="Ejecución" ${tarea.estado === 'Ejecución' ? 'selected' : ''}>En Ejecución</option>
                <option value="Finalizada" ${tarea.estado === 'Finalizada' ? 'selected' : ''}>Finalizada</option>
            </select>
            <div class="d-flex justify-content-around">
                <button class="btn ${buttonClass} btn-lg editar-tarea" data-id="${tarea.id}"><i class="bi bi-pencil-square"></i> Editar</button>
                <button class="btn btn-danger btn-lg eliminar-tarea" data-id="${tarea.id}"><i class="bi bi-journal-x"></i> Eliminar</button>
            </div>
        </div>
    </div>
    `;

    tareaElement.querySelector('.estado-tarea').addEventListener('change', actualizarEstadoTarea);
    tareaElement.querySelector('.editar-tarea').addEventListener('click', abrirModalEdicion);
    tareaElement.querySelector('.eliminar-tarea').addEventListener('click', eliminarTarea);
    console.log("Elemento de tarea finalizado:", tareaElement);

    return tareaElement;
}


function crearTarea(form) {
    const formData = new FormData(form);

    fetch('crear_tarea.php', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            mostrarTareas('Pendiente');
            form.reset();
            bootstrap.Modal.getInstance(document.getElementById('modalNuevaTarea')).hide();
        } else {
            alert('Error al crear la tarea');
        }
    })
    .catch(error => {
        console.error('Error al crear la tarea:', error);
        alert('Error al crear la tarea. Por favor, intente de nuevo.');
    });
}

function actualizarEstadoTarea(event) {
    const id = event.target.dataset.id;
    const nuevoEstado = event.target.value;

    fetch('actualizar_tarea.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `id=${id}&estado=${nuevoEstado}`
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            mostrarTareas(nuevoEstado);
        } else {
            alert('Error al actualizar el estado de la tarea');
        }
    })
    .catch(error => {
        console.error('Error al actualizar el estado de la tarea:', error);
        alert('Error al actualizar el estado de la tarea. Por favor, intente de nuevo.');
    });
}

function abrirModalEdicion(event) {
    const id = event.target.dataset.id;
    fetch(`obtener_tarea.php?id=${id}`)
        .then(response => response.json())
        .then(tarea => {
            document.getElementById('editar-id').value = tarea.id;
            document.getElementById('editar-titulo').value = tarea.titulo;
            document.getElementById('editar-descripcion').value = tarea.descripcion;
            document.getElementById('editar-fecha_limite').value = tarea.fecha_limite;
            document.getElementById('editar-prioridad').value = tarea.prioridad;
            document.getElementById('editar-estado').value = tarea.estado;
            bootstrap.Modal.getInstance(document.getElementById('modal-editar')).show();
        })
        .catch(error => {
            console.error('Error al abrir el modal de edición:', error);
            alert('Error al cargar los datos de la tarea. Por favor, intente de nuevo.');
        });
}

function guardarEdicionTarea(form) {
    const formData = new FormData(form);

    fetch('editar_tarea.php', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            bootstrap.Modal.getInstance(document.getElementById('modal-editar')).hide();
            mostrarTareas(formData.get('estado'));
        } else {
            alert('Error al editar la tarea');
        }
    })
    .catch(error => {
        console.error('Error al editar la tarea:', error);
        alert('Error al editar la tarea. Por favor, intente de nuevo.');
    });
}

function eliminarTarea(event) {
    const id = event.target.dataset.id;
    if (confirm('¿Estás seguro de que quieres eliminar esta tarea?')) {
        fetch('eliminar_tarea.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `id=${id}`
        })
        .then(response => response.json())
        .then(result => {
            if (result.success) {
                mostrarTareas(document.querySelector('.nav-link.active').getAttribute('data-tipo'));
            } else {
                alert('Error al eliminar la tarea');
            }
        })
        .catch(error => {
            console.error('Error al eliminar la tarea:', error);
            alert('Error al eliminar la tarea. Por favor, intente de nuevo.');
        });
    }
}

function eliminarTareaModal() {
    const id = document.getElementById('editar-id').value;
    if (confirm('¿Estás seguro de que quieres eliminar esta tarea?')) {
        fetch('eliminar_tarea.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `id=${id}`
        })
        .then(response => response.json())
        .then(result => {
            if (result.success) {
                bootstrap.Modal.getInstance(document.getElementById('modal-editar')).hide();
                mostrarTareas(document.querySelector('.nav-link.active').getAttribute('data-tipo'));
            } else {
                alert('Error al eliminar la tarea');
            }
        })
        .catch(error => {
            console.error('Error al eliminar la tarea:', error);
            alert('Error al eliminar la tarea. Por favor, intente de nuevo.');
        });
    }
}

5.- Script para crear nuevas tareas "crear_tarea.php":
<?php

require_once 'conexion.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $titulo = $_POST['titulo'];
    $descripcion = $_POST['descripcion'];
    $prioridad = $_POST['prioridad'];
    $fecha_limite = $_POST['fecha_limite'];

    $stmt = $pdo->prepare("INSERT INTO tareas (titulo, descripcion, prioridad, fecha_limite) VALUES (?, ?, ?, ?)");
    
    if ($stmt->execute([$titulo, $descripcion, $prioridad, $fecha_limite])) {
        echo json_encode(['success' => true]);
    } else {
        echo json_encode(['success' => false]);
    }
}

6.- Archivo para obtener los detalles de una tarea específica "obtener_tarea.php":
<?php

require_once 'conexion.php';

if (isset($_GET['id'])) {
    $id = $_GET['id'];
    $stmt = $pdo->prepare("SELECT * FROM tareas WHERE id = ?");
    $stmt->execute([$id]);
    $tarea = $stmt->fetch();

    if ($tarea) {
        echo json_encode($tarea);
    } else {
        echo json_encode(['error' => 'Tarea no encontrada']);
    }
} else {
    echo json_encode(['error' => 'ID de tarea no proporcionado']);
}

7.- Script para obtener las tareas de la base de datos "obtener_tareas.php": 
<?php

require_once 'conexion.php';

$stmt = $pdo->query("SELECT * FROM tareas ORDER BY fecha_creacion DESC");
$tareas = $stmt->fetchAll();

echo json_encode($tareas);

8.- Archivo para manejar la actualización de los datos en la base de datos "editar_tarea.php":
<?php
// editar_tarea.php
require_once 'conexion.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $id = $_POST['id'];
    $titulo = $_POST['titulo'];
    $descripcion = $_POST['descripcion'];
    $prioridad = $_POST['prioridad'];
    $fecha_limite = $_POST['fecha_limite'];
    $estado = $_POST['estado'];

    $stmt = $pdo->prepare("UPDATE tareas SET titulo = ?, descripcion = ?, prioridad = ?, fecha_limite = ?, estado = ? WHERE id = ?");
    
    if ($stmt->execute([$titulo, $descripcion, $prioridad, $fecha_limite, $estado, $id])) {
        echo json_encode(['success' => true]);
    } else {
        echo json_encode(['success' => false]);
    }
} else {
    echo json_encode(['success' => false, 'error' => 'Método no permitido']);
}

9.- Script para actualizar tareas existentes "actualizar_tarea.php": 
<?php

require_once 'conexion.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $id = $_POST['id'];
    $estado = $_POST['estado'];

    $stmt = $pdo->prepare("UPDATE tareas SET estado = ? WHERE id = ?");
    
    if ($stmt->execute([$estado, $id])) {
        echo json_encode(['success' => true]);
    } else {
        echo json_encode(['success' => false]);
    }
}

10.- Script para eliminar las tareas de la base de datos "eliminar_tarea.php": 
<?php

require_once 'conexion.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $id = $_POST['id'];

    $stmt = $pdo->prepare("DELETE FROM tareas WHERE id = ?");
    
    if ($stmt->execute([$id])) {
        echo json_encode(['success' => true]);
    } else {
        echo json_encode(['success' => false]);
    }
} else {
    echo json_encode(['success' => false, 'error' => 'Método no permitido']);
}
